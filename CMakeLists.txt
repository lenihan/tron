# CMakeList.txt : Top-level CMake project file, do global configuration
# and include sub-projects here.
#
cmake_minimum_required(VERSION 3.8)

project("tron")

# Group ALL_BUILD.vcxproj and ZERO_CHECK.vcxproj under "CMakePredifinedTargets"
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Directory for output files
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib 
  CACHE PATH "Output directory for static libraries.")

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib
  CACHE PATH "Output directory for shared libraries.")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
  CACHE PATH "Output directory for executables and DLL's.")

foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/bin" CACHE PATH "" FORCE)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/lib" CACHE PATH "" FORCE)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} "${CMAKE_BINARY_DIR}/lib" CACHE PATH "" FORCE)
endforeach()

# Make add postfix to non-Release artifacts
set(CMAKE_DEBUG_POSTFIX _Debug) 
set(CMAKE_MINSIZEREL_POSTFIX _MinSizeRel)
set(CMAKE_RELWITHDEBINFO_POSTFIX _RelWithDebInfo)

function(set_target_postfix)
  set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
  set_target_properties(${PROJECT_NAME} PROPERTIES MINSIZEREL_POSTFIX ${CMAKE_MINSIZEREL_POSTFIX})
  set_target_properties(${PROJECT_NAME} PROPERTIES RELWITHDEBINFO_POSTFIX ${CMAKE_RELWITHDEBINFO_POSTFIX})
endfunction()

# Setup Qt
set(QT_DIR "third_party/qt5/build/qtbase")
include_directories("${QT_DIR}/include")
include_directories("${QT_DIR}/include/QtAccessibilitySupport")
include_directories("${QT_DIR}/include/QtANGLE")
include_directories("${QT_DIR}/include/QtConcurrent")
include_directories("${QT_DIR}/include/QtCore")
include_directories("${QT_DIR}/include/QtDBus")
include_directories("${QT_DIR}/include/QtDeviceDiscoverySupport")
include_directories("${QT_DIR}/include/QtEdidSupport")
include_directories("${QT_DIR}/include/QtEglSupport")
include_directories("${QT_DIR}/include/QtEventDispatcherSupport")
include_directories("${QT_DIR}/include/QtFbSupport")
include_directories("${QT_DIR}/include/QtFontDatabaseSupport")
include_directories("${QT_DIR}/include/QtGui")
include_directories("${QT_DIR}/include/QtNetwork")
include_directories("${QT_DIR}/include/QtOpenGL")
include_directories("${QT_DIR}/include/QtOpenGLExtensions")
include_directories("${QT_DIR}/include/QtPlatformCompositorSupport")
include_directories("${QT_DIR}/include/QtPlatformHeaders")
include_directories("${QT_DIR}/include/QtPrintSupport")
include_directories("${QT_DIR}/include/QtSql")
include_directories("${QT_DIR}/include/QtTest")
include_directories("${QT_DIR}/include/QtThemeSupport")
include_directories("${QT_DIR}/include/QtWidgets")
include_directories("${QT_DIR}/include/QtWindowsUIAutomationSupport")
include_directories("${QT_DIR}/include/QtXml")
include_directories("${QT_DIR}/include/QtZlib")
set(QT_LIB_DIR "${QT_DIR}/lib")
find_library(QT_EGL_LIB_RELEASE                         NAMES libEGL.lib                          PATHS ${QT_LIB_DIR})
find_library(QT_EGL_LIB_DEBUG                           NAMES libEGLd.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_GLESV2_LIB_RELEASE                      NAMES libGLESv2.lib                       PATHS ${QT_LIB_DIR})
find_library(QT_GLESV2_LIB_DEBUG                        NAMES libGLESv2d.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_PREPROCESSOR_LIB_RELEASE                NAMES preprocessor.lib                    PATHS ${QT_LIB_DIR})
find_library(QT_PREPROCESSOR_LIB_DEBUG                  NAMES preprocessord.lib                   PATHS ${QT_LIB_DIR})
find_library(QT_ACCESSIBILITYSUPPORT_LIB_RELEASE        NAMES Qt5AccessibilitySupport.lib         PATHS ${QT_LIB_DIR})
find_library(QT_ACCESSIBILITYSUPPORT_LIB_DEBUG          NAMES Qt5AccessibilitySupportd.lib        PATHS ${QT_LIB_DIR})
find_library(QT_BOOTSTRAP_LIB                           NAMES Qt5Bootstrap.lib                    PATHS ${QT_LIB_DIR})
find_library(QT_CONCURRENT_LIB_RELEASE                  NAMES Qt5Concurrent.lib                   PATHS ${QT_LIB_DIR})
find_library(QT_CONCURRENT_LIB_DEBUG                    NAMES Qt5Concurrentd.lib                  PATHS ${QT_LIB_DIR})
find_library(QT_CORE_LIB_RELEASE                        NAMES Qt5Core.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_CORE_LIB_DEBUG                          NAMES Qt5Cored.lib                        PATHS ${QT_LIB_DIR})
find_library(QT_DBUS_LIB_RELEASE                        NAMES Qt5DBus.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_DBUS_LIB_DEBUG                          NAMES Qt5DBusd.lib                        PATHS ${QT_LIB_DIR})
find_library(QT_DEVICEDISCOVERYSUPPORT_LIB_RELEASE      NAMES Qt5DeviceDiscoverySupport.lib       PATHS ${QT_LIB_DIR})
find_library(QT_DEVICEDISCOVERYSUPPORT_LIB_DEBUG        NAMES Qt5DeviceDiscoverySupportd.lib      PATHS ${QT_LIB_DIR})
find_library(QT_EDIDSUPPORT_LIB_RELEASE                 NAMES Qt5EdidSupport.lib                  PATHS ${QT_LIB_DIR})
find_library(QT_EDIDSUPPORT_LIB_DEBUG                   NAMES Qt5EdidSupportd.lib                 PATHS ${QT_LIB_DIR})
find_library(QT_EGLSUPPORT_LIB_RELEASE                  NAMES Qt5EglSupport.lib                   PATHS ${QT_LIB_DIR})
find_library(QT_EGLSUPPORT_LIB_DEBUG                    NAMES Qt5EglSupportd.lib                  PATHS ${QT_LIB_DIR})
find_library(QT_EVENTDISPATCHERSUPPORT_LIB_RELEASE      NAMES Qt5EventDispatcherSupport.lib       PATHS ${QT_LIB_DIR})
find_library(QT_EVENTDISPATCHERSUPPORT_LIB_DEBUG        NAMES Qt5EventDispatcherSupportd.lib      PATHS ${QT_LIB_DIR})
find_library(QT_FBSUPPORT_LIB_RELEASE                   NAMES Qt5FbSupport.lib                    PATHS ${QT_LIB_DIR})
find_library(QT_FBSUPPORT_LIB_DEBUG                     NAMES Qt5FbSupportd.lib                   PATHS ${QT_LIB_DIR})
find_library(QT_FONTDATABASESUPPORT_LIB_RELEASE         NAMES Qt5FontDatabaseSupport.lib          PATHS ${QT_LIB_DIR})
find_library(QT_FONTDATABASESUPPORT_LIB_DEBUG           NAMES Qt5FontDatabaseSupportd.lib         PATHS ${QT_LIB_DIR})
find_library(QT_GUI_LIB_RELEASE                         NAMES Qt5Gui.lib                          PATHS ${QT_LIB_DIR})
find_library(QT_GUI_LIB_DEBUG                           NAMES Qt5Guid.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_NETWORK_LIB_RELEASE                     NAMES Qt5Network.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_NETWORK_LIB_DEBUG                       NAMES Qt5Networkd.lib                     PATHS ${QT_LIB_DIR})
find_library(QT_OPENGL_LIB_RELEASE                      NAMES Qt5OpenGL.lib                       PATHS ${QT_LIB_DIR})
find_library(QT_OPENGL_LIB_DEBUG                        NAMES Qt5OpenGLd.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_OPENGLEXTENSIONS_LIB_RELEASE            NAMES Qt5OpenGLExtensions.lib             PATHS ${QT_LIB_DIR})
find_library(QT_OPENGLEXTENSIONS_LIB_DEBUG              NAMES Qt5OpenGLExtensionsd.lib            PATHS ${QT_LIB_DIR})
find_library(QT_PLATFORMCOMPOSITORSUPPORT_LIB_RELEASE   NAMES Qt5PlatformCompositorSupport.lib    PATHS ${QT_LIB_DIR})
find_library(QT_PLATFORMCOMPOSITORSUPPORT_LIB_DEBUG     NAMES Qt5PlatformCompositorSupportd.lib   PATHS ${QT_LIB_DIR})
find_library(QT_PRINTSUPPORT_LIB_RELEASE                NAMES Qt5PrintSupport.lib                 PATHS ${QT_LIB_DIR})
find_library(QT_PRINTSUPPORT_LIB_DEBUG                  NAMES Qt5PrintSupportd.lib                PATHS ${QT_LIB_DIR})
find_library(QT_SQL_LIB_RELEASE                         NAMES Qt5Sql.lib                          PATHS ${QT_LIB_DIR})
find_library(QT_SQL_LIB_DEBUG                           NAMES Qt5Sqld.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_TEST_LIB_RELEASE                        NAMES Qt5Test.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_TEST_LIB_DEBUG                          NAMES Qt5Testd.lib                        PATHS ${QT_LIB_DIR})
find_library(QT_THEMESUPPORT_LIB_RELEASE                NAMES Qt5ThemeSupport.lib                 PATHS ${QT_LIB_DIR})
find_library(QT_THEMESUPPORT_LIB_DEBUG                  NAMES Qt5ThemeSupportd.lib                PATHS ${QT_LIB_DIR})
find_library(QT_WIDGETS_LIB_RELEASE                     NAMES Qt5Widgets.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_WIDGETS_LIB_DEBUG                       NAMES Qt5Widgetsd.lib                     PATHS ${QT_LIB_DIR})
find_library(QT_WINDOWSUIAUTOMATIONSUPPORT_LIB_RELEASE  NAMES Qt5WindowsUIAutomationSupport.lib   PATHS ${QT_LIB_DIR})
find_library(QT_WINDOWSUIAUTOMATIONSUPPORT_LIB_DEBUG    NAMES Qt5WindowsUIAutomationSupportd.lib  PATHS ${QT_LIB_DIR})
find_library(QT_XML_LIB_RELEASE                         NAMES Qt5Xml.lib                          PATHS ${QT_LIB_DIR})
find_library(QT_XML_LIB_DEBUG                           NAMES Qt5Xmld.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_FREETYPE_LIB_RELEASE                    NAMES qtfreetype.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_FREETYPE_LIB_DEBUG                      NAMES qtfreetyped.lib                     PATHS ${QT_LIB_DIR})
find_library(QT_HARFBUZZ_LIB_RELEASE                    NAMES qtharfbuzz.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_HARFBUZZ_LIB_DEBUG                      NAMES qtharfbuzzd.lib                     PATHS ${QT_LIB_DIR})
find_library(QT_LIBPNG_LIB_RELEASE                      NAMES qtlibpng.lib                        PATHS ${QT_LIB_DIR})
find_library(QT_LIBPNG_LIB_DEBUG                        NAMES qtlibpngd.lib                       PATHS ${QT_LIB_DIR})
find_library(QT_MAIN_LIB_RELEASE                        NAMES qtmain.lib                          PATHS ${QT_LIB_DIR})
find_library(QT_MAIN_LIB_DEBUG                          NAMES qtmaind.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_PCRE2_LIB_RELEASE                       NAMES qtpcre2.lib                         PATHS ${QT_LIB_DIR})
find_library(QT_PCRE2_LIB_DEBUG                         NAMES qtpcre2d.lib                        PATHS ${QT_LIB_DIR})
find_library(QT_TRANSLATOR_LIB_RELEASE                  NAMES translator.lib                      PATHS ${QT_LIB_DIR})
find_library(QT_TRANSLATOR_LIB_DEBUG                    NAMES translatord.lib                     PATHS ${QT_LIB_DIR})
SET(QT_EGL_LIB                        optimized ${QT_EGL_LIB_RELEASE}                         debug ${QT_EGL_LIB_DEBUG})
SET(QT_GLESV2_LIB                     optimized ${QT_GLESV2_LIB_RELEASE}                      debug ${QT_GLESV2_LIB_DEBUG})
SET(QT_PREPROCESSOR_LIB               optimized ${QT_PREPROCESSOR_LIB_RELEASE}                debug ${QT_PREPROCESSOR_LIB_DEBUG})
SET(QT_ACCESSIBILITYSUPPORT_LIB       optimized ${QT_ACCESSIBILITYSUPPORT_LIB_RELEASE}        debug ${QT_ACCESSIBILITYSUPPORT_LIB_DEBUG})
SET(QT_CONCURRENT_LIB                 optimized ${QT_CONCURRENT_LIB_RELEASE}                  debug ${QT_CONCURRENT_LIB_DEBUG})
SET(QT_CORE_LIB                       optimized ${QT_CORE_LIB_RELEASE}                        debug ${QT_CORE_LIB_DEBUG})
SET(QT_DBUS_LIB                       optimized ${QT_DBUS_LIB_RELEASE}                        debug ${QT_DBUS_LIB_DEBUG})
SET(QT_DEVICEDISCOVERYSUPPORT_LIB     optimized ${QT_DEVICEDISCOVERYSUPPORT_LIB_RELEASE}      debug ${QT_DEVICEDISCOVERYSUPPORT_LIB_DEBUG})
SET(QT_EDIDSUPPORT_LIB                optimized ${QT_EDIDSUPPORT_LIB_RELEASE}                 debug ${QT_EDIDSUPPORT_LIB_DEBUG})
SET(QT_EGLSUPPORT_LIB                 optimized ${QT_EGLSUPPORT_LIB_RELEASE}                  debug ${QT_EGLSUPPORT_LIB_DEBUG})
SET(QT_EVENTDISPATCHERSUPPORT_LIB     optimized ${QT_EVENTDISPATCHERSUPPORT_LIB_RELEASE}      debug ${QT_EVENTDISPATCHERSUPPORT_LIB_DEBUG})
SET(QT_FBSUPPORT_LIB                  optimized ${QT_FBSUPPORT_LIB_RELEASE}                   debug ${QT_FBSUPPORT_LIB_DEBUG})
SET(QT_FONTDATABASESUPPORT_LIB        optimized ${QT_FONTDATABASESUPPORT_LIB_RELEASE}         debug ${QT_FONTDATABASESUPPORT_LIB_DEBUG})
SET(QT_GUI_LIB                        optimized ${QT_GUI_LIB_RELEASE}                         debug ${QT_GUI_LIB_DEBUG})
SET(QT_NETWORK_LIB                    optimized ${QT_NETWORK_LIB_RELEASE}                     debug ${QT_NETWORK_LIB_DEBUG})
SET(QT_OPENGL_LIB                     optimized ${QT_OPENGL_LIB_RELEASE}                      debug ${QT_OPENGL_LIB_DEBUG})
SET(QT_OPENGLEXTENSIONS_LIB           optimized ${QT_OPENGLEXTENSIONS_LIB_RELEASE}            debug ${QT_OPENGLEXTENSIONS_LIB_DEBUG})
SET(QT_PLATFORMCOMPOSITORSUPPORT_LIB  optimized ${QT_PLATFORMCOMPOSITORSUPPORT_LIB_RELEASE}   debug ${QT_PLATFORMCOMPOSITORSUPPORT_LIB_DEBUG})
SET(QT_PRINTSUPPORT_LIB               optimized ${QT_PRINTSUPPORT_LIB_RELEASE}                debug ${QT_PRINTSUPPORT_LIB_DEBUG})
SET(QT_SQL_LIB                        optimized ${QT_SQL_LIB_RELEASE}                         debug ${QT_SQL_LIB_DEBUG})
SET(QT_TEST_LIB                       optimized ${QT_TEST_LIB_RELEASE}                        debug ${QT_TEST_LIB_DEBUG})
SET(QT_THEMESUPPORT_LIB               optimized ${QT_THEMESUPPORT_LIB_RELEASE}                debug ${QT_THEMESUPPORT_LIB_DEBUG})
SET(QT_WIDGETS_LIB                    optimized ${QT_WIDGETS_LIB_RELEASE}                     debug ${QT_WIDGETS_LIB_DEBUG})
SET(QT_WINDOWSUIAUTOMATIONSUPPORT_LIB optimized ${QT_WINDOWSUIAUTOMATIONSUPPORT_LIB_RELEASE}  debug ${QT_WINDOWSUIAUTOMATIONSUPPORT_LIB_DEBUG})
SET(QT_XML_LIB                        optimized ${QT_XML_LIB_RELEASE}                         debug ${QT_XML_LIB_DEBUG})
SET(QT_FREETYPE_LIB                   optimized ${QT_FREETYPE_LIB_RELEASE}                    debug ${QT_FREETYPE_LIB_DEBUG})
SET(QT_HARFBUZZ_LIB                   optimized ${QT_HARFBUZZ_LIB_RELEASE}                    debug ${QT_HARFBUZZ_LIB_DEBUG})
SET(QT_LIBPNG_LIB                     optimized ${QT_LIBPNG_LIB_RELEASE}                      debug ${QT_LIBPNG_LIB_DEBUG})
SET(QT_MAIN_LIB                       optimized ${QT_MAIN_LIB_RELEASE}                        debug ${QT_MAIN_LIB_DEBUG})
SET(QT_PCRE2_LIB                      optimized ${QT_PCRE2_LIB_RELEASE}                       debug ${QT_PCRE2_LIB_DEBUG})
SET(QT_TRANSLATOR_LIB                 optimized ${QT_TRANSLATOR_LIB_RELEASE}                  debug ${QT_TRANSLATOR_LIB_DEBUG})

# Setup OSG
set(OSG_DIR "third_party/OpenSceneGraph")
include_directories("${OSG_DIR}/include")
include_directories("${OSG_DIR}/build/Release/include")
set(OSG_LIB_RELEASE_DIR "${OSG_DIR}/build/Release/lib")
set(OSG_LIB_DEBUG_DIR   "${OSG_DIR}/build/Debug/lib")
find_library(OSG_OPENTHREADS_LIB_RELEASE  NAMES OpenThreads.lib      PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_OPENTHREADS_LIB_DEBUG    NAMES OpenThreadsd.lib     PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_LIB_RELEASE              NAMES osg.lib              PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_LIB_DEBUG                NAMES osgd.lib             PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_ANIMATION_LIB_RELEASE    NAMES osgAnimation.lib     PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_ANIMATION_LIB_DEBUG      NAMES osgAnimationd.lib    PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_DB_LIB_RELEASE           NAMES osgDB.lib            PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_DB_LIB_DEBUG             NAMES osgDBd.lib           PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_FX_LIB_RELEASE           NAMES osgFX.lib            PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_FX_LIB_DEBUG             NAMES osgFXd.lib           PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_GA_LIB_RELEASE           NAMES osgGA.lib            PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_GA_LIB_DEBUG             NAMES osgGAd.lib           PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_MANIPULATOR_LIB_RELEASE  NAMES osgManipulator.lib   PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_MANIPULATOR_LIB_DEBUG    NAMES osgManipulatord.lib  PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_PARTICLE_LIB_RELEASE     NAMES osgParticle.lib      PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_PARTICLE_LIB_DEBUG       NAMES osgParticled.lib     PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_PRESENTATION_LIB_RELEASE NAMES osgPresentation.lib  PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_PRESENTATION_LIB_DEBUG   NAMES osgPresentationd.lib PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_SHADOW_LIB_RELEASE       NAMES osgShadow.lib        PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_SHADOW_LIB_DEBUG         NAMES osgShadowd.lib       PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_SIM_LIB_RELEASE          NAMES osgSim.lib           PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_SIM_LIB_DEBUG            NAMES osgSimd.lib          PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_TERRAIN_LIB_RELEASE      NAMES osgTerrain.lib       PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_TERRAIN_LIB_DEBUG        NAMES osgTerraind.lib      PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_TEXT_LIB_RELEASE         NAMES osgText.lib          PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_TEXT_LIB_DEBUG           NAMES osgTextd.lib         PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_UI_LIB_RELEASE           NAMES osgUI.lib            PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_UI_LIB_DEBUG             NAMES osgUId.lib           PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_UTIL_LIB_RELEASE         NAMES osgUtil.lib          PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_UTIL_LIB_DEBUG           NAMES osgUtild.lib         PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_VIEWER_LIB_RELEASE       NAMES osgViewer.lib        PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_VIEWER_LIB_DEBUG         NAMES osgViewerd.lib       PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_VOLUME_LIB_RELEASE       NAMES osgVolume.lib        PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_VOLUME_LIB_DEBUG         NAMES osgVolumed.lib       PATHS ${OSG_LIB_DEBUG_DIR})
find_library(OSG_WIDGET_LIB_RELEASE       NAMES osgWidget.lib        PATHS ${OSG_LIB_RELEASE_DIR})
find_library(OSG_WIDGET_LIB_DEBUG         NAMES osgWidgetd.lib       PATHS ${OSG_LIB_DEBUG_DIR})
set(OSG_OPENTHREADS_LIB  optimized ${OSG_OPENTHREADS_LIB_RELEASE}  debug ${OSG_OPENTHREADS_LIB_DEBUG})
set(OSG_LIB              optimized ${OSG_LIB_RELEASE}              debug ${OSG_LIB_DEBUG})
set(OSG_ANIMATION_LIB    optimized ${OSG_ANIMATION_LIB_RELEASE}    debug ${OSG_ANIMATION_LIB_DEBUG})
set(OSG_DB_LIB           optimized ${OSG_DB_LIB_RELEASE}           debug ${OSG_DB_LIB_DEBUG})
set(OSG_FX_LIB           optimized ${OSG_FX_LIB_RELEASE}           debug ${OSG_FX_LIB_DEBUG})
set(OSG_GA_LIB           optimized ${OSG_GA_LIB_RELEASE}           debug ${OSG_GA_LIB_DEBUG})
set(OSG_MANIPULATOR_LIB  optimized ${OSG_MANIPULATOR_LIB_RELEASE}  debug ${OSG_MANIPULATOR_LIB_DEBUG})
set(OSG_PARTICLE_LIB     optimized ${OSG_PARTICLE_LIB_RELEASE}     debug ${OSG_PARTICLE_LIB_DEBUG})
set(OSG_PRESENTATION_LIB optimized ${OSG_PRESENTATION_LIB_RELEASE} debug ${OSG_PRESENTATION_LIB_DEBUG})
set(OSG_SHADOW_LIB       optimized ${OSG_SHADOW_LIB_RELEASE}       debug ${OSG_SHADOW_LIB_DEBUG})
set(OSG_SIM_LIB          optimized ${OSG_SIM_LIB_RELEASE}          debug ${OSG_SIM_LIB_DEBUG})
set(OSG_TERRAIN_LIB      optimized ${OSG_TERRAIN_LIB_RELEASE}      debug ${OSG_TERRAIN_LIB_DEBUG})
set(OSG_TEXT_LIB         optimized ${OSG_TEXT_LIB_RELEASE}         debug ${OSG_TEXT_LIB_DEBUG})
set(OSG_UI_LIB           optimized ${OSG_UI_LIB_RELEASE}           debug ${OSG_UI_LIB_DEBUG})
set(OSG_UTIL_LIB         optimized ${OSG_UTIL_LIB_RELEASE}         debug ${OSG_UTIL_LIB_DEBUG})
set(OSG_VIEWER_LIB       optimized ${OSG_VIEWER_LIB_RELEASE}       debug ${OSG_VIEWER_LIB_DEBUG})
set(OSG_VOLUME_LIB       optimized ${OSG_VOLUME_LIB_RELEASE}       debug ${OSG_VOLUME_LIB_DEBUG})
set(OSG_WIDGET_LIB       optimized ${OSG_WIDGET_LIB_RELEASE}       debug ${OSG_WIDGET_LIB_DEBUG})


# Include sub-projects.
add_subdirectory("src/hello/hello_cmake")
add_subdirectory("src/hello/hello_qt")
add_subdirectory("src/hello/hello_osg")
# add_subdirectory("src/hello/hello_osg_terrain_tile")
# add_subdirectory("src/hello/hello_osg_textured_quad")
# add_subdirectory("src/vector_map")
# add_subdirectory("src/osgbillboard")
# add_subdirectory("src/osgterrain")
# add_subdirectory("src/osgthreadedterrain")
# add_subdirectory("src/test_json_to_osgb")
# add_subdirectory("src/sandbox/parseJson")
# add_subdirectory("src/sandbox/QTreeView")
